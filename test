#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <unistd.h>


int IDmax(int* tab,int taille){
    int max=0;
    int id;
    for (int i=0; i<taille; i++){
        if (tab[i]>max){
            max=tab[i];
            id=i;
        }
    }
    return id;
}

int selection(int* tab,int size, char* phrase){
	//vérification
	if(tab==NULL){
		printf("ERREUR FONCTION SELECTION");
	}
	for(int i=0;i<size;i++){
	    printf("%d/",tab[i]);
	}
	//process
	int a=0,b=0;
	do{
		printf("%s\n",phrase);
		if(scanf("%d",&a)!=1){
		    printf("Erreur saisie des données\n");
		    exit(8);
		}
		for(int  i=0; i<size; i++){
			if(a==tab[i]){
				b=1;
			}
		}
	} while(b!=1);
	return a;
}

typedef struct{
	int type;
	int puissance;
	int durée;

}Effet;

typedef struct {
    int id; //ID de la capacité, ELLES COMMENCENT A 5001.
    int cib1[2]; //premier ID de ciblage, et quantité de cible (a ne pas definir)
    int ef1; //effet appliqué au 1er ciblage
    int cd; //temps de refroidissement (cooldown) à ne pas modifier
    int bl; //temps de refroidissement actif
    int cde;
} Capacite; //structure définissant les caractéristiques d'une capacité

typedef struct{
    int pid; // ID du personnage pour remplacer le nom, COMMENCE A 1001.
    char* nom; //nom du personnage qui set à identifier son fichier
    int pv; //base de PV
    int atk; //base d'atk
    int def; //base de def
    int vit; //base de vit
    int agl; //base d'agilité
    int dex; //base de dextérité
    int ndc; //nombre de capacités       //à vérifier pour éviter les fuites de données
    Capacite* capa; //pointeur du tableau de taille ndc
} IDperso; //défini l'identité du perso, qui sert à définir et redéfinir ses stats en cas de modifications

typedef struct {
    int ID; //id du personnage dans le terrain (placement)
    int pv; //pv modifiés activement, le personnage meurt s'ils atteignent 0
    int atk; //atk modifiée activement en se basant sur la stat de base et les modificateurs actuels
    int def; //idem
    int vit; //idem, défini la fréquence d'action
    int agl; //idem, défini les chances d'esquiver les attaques
    int dex; //idem, défini les chances de coup critique (150% de dégâts, ignorants les modifs de stats [à la pokémon])
    IDperso base; //base du perso permettant de savoir les stats de base du perso
    int act; //jauge d'action du personnage (pour l'instant, sur 10)
    Effet* effet;
} Combattant;

typedef struct {
    char* nom;
    int pv;
    int atk;
    int def;
    int vit;
    int agl;
    int dex;
    int ndc;
    Capacite* capa;
}Lamda;

typedef struct {
    char* nom;
    int cib1[2];
    int ef1;
    int cd;
    int bl;
    } Repos;

void displayfighter(Combattant n){
	printf("\n%s\n-ID:%d\n-HP:%d\n-ATK:%d\n-DEF:%d\n-Agilité:%d\n-Dextérité:%d\n-Action:%d\n",n.base.nom,n.ID,n.pv,n.atk,n.def,n.agl,n.dex,n.act);

}

void displaybase(Combattant n){
    printf("\n%s\n-ID:%d\n-PV:%d\n-ATK:%d\n-DEF:%d\n-Agilité:%d\n-Dextérité:%d\n",n.base.nom,n.base.pid,n.base.pv,n.base.atk,n.base.def,n.base.agl,n.base.dex);
}


int choixcapa(Combattant perso) {
    int n=0;
  
    do {
        printf(" veuillez selectionner une des 3 capacites");
        if(perso.base.pid== 1001) {
        	printf("1. Repos : Récupère 30Pv; Cd = 4 tours.\n 2. Position : choisi entre 2 mode pour un nombre de 3 tours : mode offensive ou mode défensif; ayant un cooldown de 5 tours. le mode offensif confèrera 20% d'atk en plus et - 20% de défense, inversement pour le mode défensif.");
        	}
        	else if(perso.base.pid== 1002) {
        	printf("1. Etirement : -15 vit, + 15% d'agi, +50% def, pendant 3 tours. Cd = 5.\n 2. Aiguisage : atk, dex, vit + 25% pendant 3 tours. Cd = 5.\n 3. Pointe déchirante : cible unique qui subit entre 120 et 140% de l'atk du lanceur et perd 20 de vitesse. Cd = 6.");

        }
        else if(perso.base.pid== 1003) {
        	printf("1. Soin : allié unique + 50PV. CD =4.\n 2. Mur défensif : cible tous les alliés, + 60~70% de def en plus pendant 2 tours. CD = 4.\n 3. Emprisonnement : cible unique qui perd -20% vit , - 20% d'atk pendant 3 tours. CD = 5.");

        }

        scanf("%d",&n);
    }while(n<1 || n>3);
    srand(time(NULL));
    if (perso.base.pid== 1003) {
        n=n+3;
    }
    if (perso.base.pid== 1001) {
        n=n+6;
    }
    switch (n) {
        case '1':
        if (perso.base.pid == 1002) {
            if(perso.base.capa[0].bl==0){

                return 5004;
            }
            	else if (perso.base.capa[0].bl!=0){
            	    printf("cette capacites ne peux pas etre utilisé");
            	    return choixcapa(perso);
            	}
            	else{
            	printf("erreur 1");
            	return 0;
            	}
        }

        case '2':
        if (perso.base.pid == 1002) {
            if(perso.base.capa[1].bl==0){
                return 5005;
            }
            	else if(perso.base.capa[1].bl!=0){
                	printf("cette capacites ne peux pas etre utilisé");
                	return choixcapa(perso);
            	}
            	else{
            	printf("erreur 2");
            	return 0;
            	}
        }
        case '3':
        if (perso.base.pid == 1002) {
            if(perso.base.capa[2].bl==0){
            return 5006;
            }
            	else if(perso.base.capa[2].bl=0){
            	    printf("cette capacites ne peux pas etre utilisé");
            	    return choixcapa(perso);
            	}
            	else{
            	printf("erreur 3");
            	return 0;
            	}
        }
        case '4':
        if (perso.base.pid == 1003) {
            if(perso.base.capa[0].bl==0){
                return 5007;
            }
            	else if(perso.base.capa[0].bl!=0){
                	printf("cette capacites ne peux pas etre utilisé");
                	return choixcapa(perso);
            	}
            	else{
            	printf("erreur 4");
            	return 0;
            	}
        }
        case '5':
        if (perso.base.pid == 1003) {
            if(perso.base.capa[1].bl==0){
            return 5008;
            }
            	else if(perso.base.capa[1].bl=0){
            	    printf("cette capacites ne peux pas etre utilisé");
            	    return choixcapa(perso);
            	}
            else{
            	printf("erreur 5");
            	return 0;
            	}
        }
        case '6':
        if (perso.base.pid == 1003) {
            if(perso.base.capa[2].bl==0) {
                return 5009;
            }

            	else if(perso.base.capa[2].bl!=0){
            	    printf("cette capacites ne peux pas etre utilisé");
            	    return choixcapa(perso);
            	}
            	else{
            	printf("erreur 6");
            	return 0;
            	}
        }
        case'7':
        if (perso.base.pid == 1001) {
            if(perso.base.capa[1].bl==0){
            return 5001;
            }
            	else if(perso.base.capa[1].bl!=0){
                	printf("cette capacites ne peux pas etre utilisé");
                	return choixcapa(perso);
            	}
            	else{
            	printf("erreur 7");
            	return 0;
            	}
        }
        case'8':
        if (perso.base.pid == 1001) {
            if(perso.base.capa[2].bl==0) {
            return 5002;
            }
            	else if(perso.base.capa[2].bl!=0){
                	printf("cette capacites ne peux pas etre utilisé");
                	return choixcapa(perso);
            	}
            else{
            	printf("erreur 8");
            	return 0;
            	}
        }
    }
}
void effet (Combattant patk, Combattant *tab, int t1, int tmax, int ne) {
	
    int tab2[tmax];
    for(int i=0; i<tmax; i++){
    	tab2[i]=i;
    
    }
    if(tab== NULL){
    printf("erreur rab");
    exit(0);
    }
    patk.effet = (malloc(sizeof(Effet)*ne));
    
    if (choixcapa( patk) == 5004 ){
        int k=0;
        int i=0;
        while(k!=3){
        	if(patk.effet[i].durée==0) {
        	       patk.effet[i].type=4;
        	       patk.effet[i].puissance=-15;
        	       patk.effet[i].durée=3;
        	       i=i+1;
        	       k=k+1;         
    	     	       patk.effet[i].type=5;
    	     	       patk.effet[i].puissance=patk.agl*0.15;
    	     	       patk.effet[i].durée=3;
    	     	       i=i+1;
    	     	       patk.effet[i].type=3;
    	     	       patk.effet[i].puissance=patk.def*0.5;
    	     	       patk.effet[i].durée=3;
    	     	       k=k+1;
         	}
         	else{
         	i=i+1;
         	} 
         }	  
    }
    else if (choixcapa( patk) == 5005 ) {
        int k=0;
        int i=0;
         while(k!=3){
            if(patk.effet[i].durée==0) {
                patk.effet[i].type=2;
                patk.effet[i].puissance=patk.atk*0.25;
                patk.effet[i].durée=3;
                i=i+1;
                k=k+1;
                if(patk.effet[i].durée==0) {
                	patk.effet[i].type=4;
                	patk.effet[i].puissance=patk.vit*0.25;
                	patk.effet[i].durée=3;
                	i=i+1;
                	k=k+1;
                	}
                	if(patk.effet[i].durée==0) {
                	        patk.effet[i].type=6;
                	        patk.effet[i].puissance=patk.dex*0.25;
                	        patk.effet[i].durée=3;
                	        i=i+1;
                	        k=k+1;
                	 }
                }
                else{
                i=i+1;
                }
            }
        }
    else if (choixcapa( patk) == 5006 ) {
        int n=0;
        int k=0;
        for (int i=0; i<5; i++) {
            if(patk.effet[i].durée==0 && i<5){
                patk.effet[i].type=2;
                patk.effet[i].puissance=patk.atk*1.2 + patk.atk*(rand()%21);
                patk.effet[i].durée=1;
                k=k+1;
                if (k==1) {
                i=5;
                }
            }
        }
        if(IDmax(tab2, 6)<3) {
           int n = cible(tab, t1, tmax, patk.ID,2, 2 )-1;
            for (int i=0; i<5; i++) {
                if(tab[n].effet[i].durée==0 && i<5){
                   tab[n].effet[i].type=4;
                   tab[n].effet[i].puissance=-20;
                   tab[n].effet[i].durée=1;
                   i=5;
                }
            }
        }
        else if(IDmax(tab2, 6)>=3) {
            n = cible(tab, t1, tmax, patk.ID, 2, 1)-1;
            for (int i=0; i<5; i++) {
                if(tab[n].effet[i].durée==0 && i<5){
                    tab[n].effet[i].type=4;
                    tab[n].effet[i].puissance=-20;
                    tab[n].effet[i].durée=1;
                    i=5;
                }
            }
        }
    }
    if (choixcapa( patk) == 5007) {
        if(IDmax(tab2, 6)<3) {
            int n = cible(tab, t1, tmax, patk.ID,2, 1 )-1;
            for (int i=0; i<5; i++) {
                if(tab[n].effet[i].durée==0 && i<5){
                    tab[n].effet[i].type=1;
                    tab[n].effet[i].puissance=50;
                    tab[n].effet[i].durée=1;
                    i=5;
                }
            }
        }
        else if(IDmax(tab2, 6)>=3) {
            int n = cible(tab, t1, tmax, patk.ID, 2, 2)-1;
            for (int i=0; i<5; i++) {
                if(tab[n].effet[i].durée==0 && i<5){
                    tab[n].effet[i].type=1;
                    tab[n].effet[i].puissance=50;
                    tab[n].effet[i].durée=1;
                    i=5;
                }
            }
        }
    }
    else if (choixcapa( patk) == 5008) {
        int k=0;
          if(IDmax(tab2, 6)<3) {
                for(int i=0;i<t1;i++){
                    for (int i=0; i<5; i++) {
                        if(tab[i].effet[i].durée==0 && i<5){
                            tab[i].effet[i].type=3;
                            tab[i].effet[i].puissance=tab[i].def*0.6+tab[i].def*0.1*(rand()%11);
                            tab[i].effet[i].durée=2;
                            i=5;
                            k=k+1;
                        }
                        if(k==3) {
                            i=5;
                        }
                    }        
                }
            }
            else if(IDmax(tab2, 6)>=3) {
              for(int i=t1;i<tmax;i++){
                for (int i=0; i<5; i++) {
                    if(tab[i].effet[i].durée==0 && i<5){
                        tab[i].effet[i].type=3;
                        tab[i].effet[i].puissance=tab[i].def*0.6+tab[i].def*0.1*(rand()%11);
                        tab[i].effet[i].durée=2;
                        i=5;
                    }
                }
              }    
            }
        }
    else if (choixcapa( patk) == 5009) {
        int c=0;
        int m=0;
        if(IDmax(tab2, 6)>=3) {
            c = cible(tab, t1, tmax, patk.ID, 2, 1)-1;
            for (int i=0; i<5; i++) {
                if(tab[c].effet[i].durée==0 && i<5){
                    tab[c].effet[i].type=4;
                    tab[c].effet[i].puissance=-(tab[c].vit*0.2);
                    tab[c].effet[i].durée=3;
                    i=i+1;
                    m=m+1;
                }
                for (int i=i; i<5; i++) {
                    if(tab[c].effet[i].durée==0 && i<5){
                        tab[c].effet[i].type=2;
                        tab[c].effet[i].puissance=-(tab[c].atk*0.2);
                        tab[c].effet[i].durée=3;
                        m=m+1;
                    }
                    if (m==2) {
                       i=5;
                    }
                }
            }
        }

        else if(IDmax(tab2, 6)<3) {
            int c = cible(tab, t1, tmax, patk.ID, 2, 2)-1;
            for (int i=0; i<5; i++) {
                if(tab[c].effet[i].durée==0 && i<5){
                    tab[c].effet[i].type=4;
                    tab[c].effet[i].puissance=-(tab[c].vit*0.2);
                    tab[c].effet[i].durée=3;
                    i=i+1;
                    m=m+1;
                }
                for(int i=i; i<5; i++) {
                    if(tab[c].effet[i].durée==0 && i<5){
                        tab[c].effet[i].type=2;
                        tab[c].effet[i].puissance=-(tab[c].atk*0.2);
                        tab[c].effet[i].durée=3;
                        m=m+1;
                    }
                    if (m==2) {
                        i=5;
                    }
                }
            }
        }
    }
    if (choixcapa( patk) == 5001)  {
    	int k=0;
        for (int i=0; i<=2; i++) {
            if(patk.effet[i].durée==0 && i<5) {
                patk.effet[i].type=1;
                patk.effet[i].puissance=30;
                patk.effet[i].durée=1;
                i=i+1;
                k=k+1;
            }
            if(k==1) {
                i=5;
            }
        }
    }
    else if (choixcapa( patk) == 5002) {
        int position;
        int k=0;
        printf("veuillez entrer 1 pour selectionner le mode defensif, 2 pour selectionner le mode offensif");
        scanf("%d", &position);
        if(position==1) {
            for (int i=0; i<5; i++) {
                if(patk.effet[i].durée==0 && i<5) {
                    patk.effet[i].type=3;
                    patk.effet[i].puissance=patk.def*0.2;
                    patk.effet[i].durée=3;
                    i=i+1;
                    k=k+1;
                }
                for (int h=i; h<5; h++) {
                    if(patk.effet[h].durée==0 && h<5) {
                        patk.effet[h].type=2;
                        patk.effet[h].puissance=-(patk.atk*0.2);
                        patk.effet[h].durée=3;
                        k=k+1;
                    }
                    if(k==2) {
                        i=5;
                    }
                }
            }
        }
        else if(position==2) {
        int k=0;
            for (int i=0; i<5; i++) {
                if(patk.effet[i].durée==0 && i<5) {
                    patk.effet[i].type=3;
                    patk.effet[i].puissance=-(patk.def*0.2);
                    patk.effet[i].durée=3;
                    i=i+1;
                    k=k+1;
                }
                for (int h=i; h<5; h++) {
                    if(patk.effet[h].durée==0 && h<5) {
                        patk.effet[h].type=2;
                        patk.effet[h].puissance=patk.atk*0.2;
                        patk.effet[h].durée=3;
                        k=k+1;
                    }
                    if (k==2) {
                        i=5;
                    }
                }
            }
        }
    }
}
